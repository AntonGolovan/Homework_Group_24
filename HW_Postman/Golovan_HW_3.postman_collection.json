{
	"info": {
		"_postman_id": "b9a984b2-9a38-456a-8415-0b63d4a553c9",
		"name": "Group_24_HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp = pm.response.json();\r",
							"var token = resp.token\r",
							"pm.environment.set(\"token\",token);\r",
							"console.log('=======' +token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Anton",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwerty",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test('Test 200', function(){\r",
							"    pm.response.to.be.status(200);\r",
							"})\r",
							"\r",
							"// 2. Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1638100783.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"person\",\r",
							"\t\t\"qa_salary_after_12_months\",\r",
							"\t\t\"qa_salary_after_6_months\",\r",
							"\t\t\"start_qa_salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"person\": {\r",
							"\t\t\t\"$id\": \"#root/person\", \r",
							"\t\t\t\"title\": \"Person\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"u_age\",\r",
							"\t\t\t\t\"u_name\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"u_age\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_age\", \r",
							"\t\t\t\t\t\"title\": \"U_age\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t27\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_name\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_name\", \r",
							"\t\t\t\t\t\"title\": \"U_name\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t4000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"qa_salary_after_12_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_12_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_12_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2900\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"qa_salary_after_6_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_6_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_6_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"start_qa_salary\": {\r",
							"\t\t\t\"$id\": \"#root/start_qa_salary\", \r",
							"\t\t\t\"title\": \"Start_qa_salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t1000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Schema json valid', function(){\r",
							"pm.expect(tv4.validate(resp, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var req = JSON.parse(pm.request.body.raw);\r",
							"console.log('req raw', req);\r",
							"\r",
							"pm.test('start_qa_salary', function(){\r",
							"    pm.expect(resp.start_qa_salary).to.eql(req.salary)\r",
							"})\r",
							"\r",
							"pm.test('qa_salary_after_6_months', function(){\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary * 2)\r",
							"})\r",
							"\r",
							"pm.test('qa_salary_after_12_months', function(){\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary * 2.9)\r",
							"})\r",
							"\r",
							"pm.test('u_salary_1_5_year', function(){\r",
							"    pm.expect(resp.person.u_salary_1_5_year).to.eql(req.salary * 4)\r",
							"})\r",
							"// 4. Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса (http://162.55.220.72:5005/get_test_user)\r",
							"\r",
							"var salary_1_5_year = resp.person.u_salary_1_5_year;\r",
							"pm.environment.set('salary_1_5_year', salary_1_5_year);\r",
							"\r",
							"console.log(resp.person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Anton\",\r\n    \"age\": 27,\r\n    \"salary\": 1000,\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test('Test 200', function(){\r",
							"    pm.response.to.be.status(200);\r",
							"\r",
							"})\r",
							"\r",
							"// 2. Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1638104620.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t27\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Anton\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"array\",\r",
							"\t\t\t\"default\": []\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"\r",
							"pm.test('Test json schema valid', function(){\r",
							"    pm.expect(tv4.validate(schema, resp)).to.be.true;\r",
							"})\r",
							"\r",
							"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var req = request.data;\r",
							"console.log('req', req);\r",
							"\r",
							"pm.test('salary[0]', function(){\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary)\r",
							"})\r",
							"\r",
							"pm.test('salary[1]', function(){\r",
							"    pm.expect(resp.salary[1]).to.eql(String(req.salary * 2))\r",
							"})\r",
							"\r",
							"pm.test('salary[2]', function(){\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary * 3)\r",
							"})\r",
							"// 4. проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test('проверить, что 2-й элемент массива salary больше 1-го и 0-го', function(){\r",
							"   pm.expect(+resp.salary[2]).to.be.above(resp.salary[0]);\r",
							"   pm.expect(+resp.salary[2]).to.be.above(+resp.salary[1]);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test('Test 200', function(){\r",
							"    pm.response.to.be.status(200);\r",
							"})\r",
							"\r",
							"// 2. Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1638113893.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"daily_food\",\r",
							"\t\t\"daily_sleep\",\r",
							"\t\t\"name\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t27\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"daily_food\": {\r",
							"\t\t\t\"$id\": \"#root/daily_food\", \r",
							"\t\t\t\"title\": \"Daily_food\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t0.96\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"daily_sleep\": {\r",
							"\t\t\t\"$id\": \"#root/daily_sleep\", \r",
							"\t\t\t\"title\": \"Daily_sleep\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t200\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Anton\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"\r",
							"pm.test('Test json schema valid', function(){\r",
							"    pm.expect(tv4.validate(schema, resp)).to.be.true;\r",
							"})\r",
							"\r",
							"// 3. В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var req = request.data;\r",
							"\r",
							"pm.test('daily_food eql weight * 0.012 ', function(){\r",
							"    pm.expect(resp.daily_food).to.eql(req.weight * 0.012);\r",
							"})\r",
							"\r",
							"pm.test('daily_sleep eql weight * 2.5', function(){\r",
							"    pm.expect(resp.daily_sleep).to.eql(req.weight * 2.5);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "80",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test('Test 200', function(){\r",
							"    pm.response.to.be.status(200);\r",
							"})\r",
							"\r",
							"// 2. Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1638114568.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"family\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"27\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"family\": {\r",
							"\t\t\t\"$id\": \"#root/family\", \r",
							"\t\t\t\"title\": \"Family\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"children\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"children\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/children\", \r",
							"\t\t\t\t\t\"title\": \"Children\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": [],\r",
							"\t\t\t\t\t\"items\":{\r",
							"\t\t\t\t\t\t\"$id\": \"#root/family/children/items\", \r",
							"\t\t\t\t\t\t\"title\": \"Items\", \r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t\t}\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t16000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Anton\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t4000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Test json schema valid', function(){\r",
							"    pm.expect(tv4.validate(schema, resp)).to.be.true;\r",
							"})\r",
							"\r",
							"// 3. Проверить что значение поля name = значению переменной name из окружения\r",
							"var req = request.data;\r",
							"var name = pm.environment.get('name');\r",
							"\r",
							"pm.test('значение поля name = значению переменной name из окружения', function(){\r",
							"    pm.expect(resp.name).to.eql(name);\r",
							"})\r",
							"\r",
							"//4. Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"var age = pm.environment.get('age');\r",
							"\r",
							"pm.test('age в ответе соответсвует отправленному в запросе значению поля age', function(){\r",
							"    pm.expect(resp.age).to.eql(age);\r",
							"})\r",
							"\r",
							"console.log(\"variable env\", name);\r",
							"console.log(\"resp body\", resp.name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Взять любой объект из присланного списка, используйте js random. В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"pm.test('Random curr_code', function(){\r",
							"    var item = resp[Math.floor(Math.random() * resp.length)];\r",
							"    pm.environment.set(\"Cur_ID\", item.Cur_ID);\r",
							"    console.log(item);\r",
							"})\r",
							"\r",
							"console.log('=====', resp.length);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Проверка структуры json в ответе.\r",
							"var resp = pm.response.json();\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1638133787.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"Cur_Abbreviation\",\r",
							"\t\t\"Cur_ID\",\r",
							"\t\t\"Cur_Name\",\r",
							"\t\t\"Cur_OfficialRate\",\r",
							"\t\t\"Cur_Scale\",\r",
							"\t\t\"Date\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"Cur_Abbreviation\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Abbreviation\", \r",
							"\t\t\t\"title\": \"Cur_abbreviation\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"SGD\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_ID\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_ID\", \r",
							"\t\t\t\"title\": \"Cur_id\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t421\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Cur_Name\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Name\", \r",
							"\t\t\t\"title\": \"Cur_name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Сингапурcкий доллар\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_OfficialRate\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_OfficialRate\", \r",
							"\t\t\t\"title\": \"Cur_officialrate\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t1.8661\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"Cur_Scale\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Scale\", \r",
							"\t\t\t\"title\": \"Cur_scale\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t1\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Date\": {\r",
							"\t\t\t\"$id\": \"#root/Date\", \r",
							"\t\t\t\"title\": \"Date\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"2021-11-29T00:00:00\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(schema, resp)).to.be.true;\r",
							"  });\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}